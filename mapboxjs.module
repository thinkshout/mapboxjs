<?php

/**
 * Implements hook_libraries_info().
 */
function mapboxjs_libraries_info() {
  $libraries['mapboxjs'] = array(
    'name' => 'MapBox.js',
    'vendor url' => 'http://mapbox.com/mapbox.js',
    'download url' => 'https://github.com/mapbox/mapbox.js',
    'version arguments' => array(
      'file' => 'CHANGELOG.md',
      // ## v1.3.1
      'pattern' => '/## v((\d+)\.(\d+)\.(\d+))/',
      'lines' => 1,
    ),
    'files' => array(
      'js' => array('dist/mapbox.js'),
      'css' => array('dist/mapbox.css'),
    ),
    'integration files' => array(
      'mapboxjs' => array(
        'js' => array('js/mapboxjs.drupal.js'),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_permission().
 */
function mapboxjs_permission() {
  return array(
    'administer mapboxjs presets' => array(
      'title' => t('administer mapboxjs presets'),
      'description' => t('Administer MapBox.js map presets.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback for managing MapBox.js map presets.
 *
 * @return bool
 */
function mapboxjs_access() {
  if (user_access('administer mapboxjs presets')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_entity_info().
 *
 * Provides our custom entity type/bundle for MapBox.js map presets.
 */
function mapboxjs_entity_info() {
  $return = array(
    'mapboxjs_preset' => array(
      'label' => t('MapBox.js map preset'),
      'controller class' => 'EntityAPIControllerExportable',
      'entity class' => 'MapboxjsPreset',
      'base table' => 'mapboxjs_preset',
      'uri callback' => 'entity_class_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'module' => 'mapboxjs',
      'entity keys' => array(
        'id' => 'mapboxjs_preset_id',
        'name' => 'name',
        'label' => 'label'
      ),
      'bundles' => array(
        'mapboxjs_preset' => array(
          'label' => 'Mapbox.js map preset',
        ),
      ),
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/structure/mapboxjs/presets',
        'file' => 'mapboxjs.admin.inc',
        'file path' => drupal_get_path('module', 'mapboxjs') . '/includes',
        'controller class' => 'MapboxjsPresetUIController',
      ),
      'access callback' => 'mapboxjs_access',
    ),
  );

  return $return;
}

/**
 * Gets an array of all registration types, keyed by the name.
 *
 * @param string $name
 *   If set, the type with the given name is returned.
 */
function mapboxjs_load_presets($name = NULL) {
  $presets = entity_load_multiple_by_name('mapboxjs_preset', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($presets) : $presets;
}

/**
 * Render a preset as a map.
 *
 * @param MapboxjsPreset $preset
 *
 * @return MapBox.js map as a renderable array
 */
function mapboxjs_render_preset(MapboxjsPreset $preset) {
  return mapboxjs_render_map(
    $preset->layers,
    $preset->settings,
    $preset->settings['height'],
    NULL,
    array('class' => array($preset->name, 'mapboxjs-map'))
  );
}

/**
 * Implements hook_theme().
 */
function mapboxjs_theme($existing, $type, $theme, $path) {
  return array(
    'mapboxjs_map' => array(
      'arguments' => array(
        'extras' => ''
      ),
      'template' => 'mapboxjs_map',
    ),
    'mapboxjs_preset_form_table' => array(
      'render element' => 'elements',
      'file' => 'includes/mapboxjs.admin.inc',
    ),
  );
}

/**
 * Load all MapBox.js required client files and return markup for a map.
 *
 * @param $layers
 * @param $settings
 * @param int $height
 * @param null $extras
 * @param array $attributes
 *
 * @return string
 */
function mapboxjs_render_map($layers, $settings, $height = 400, $extras = NULL, $attributes = array()) {
  libraries_load('mapboxjs');

  $map_id = drupal_html_id('mapboxjs_map');

  $settings = array(
    $map_id => array(
      'layers' => $layers,
      'configuration' => $settings
    )
  );

  // Pass our settings to Drupal's global js variable.
  drupal_add_js(array('mapboxjs' => $settings), 'setting');

  // Merge default attributes
  $attributes = array_merge(array(
    'id' => $map_id,
    'style' => "height: {$height}px",
    'class' => array('mapboxjs-map')
  ), $attributes);

  return theme('mapboxjs_map', array(
    'attributes_array' => $attributes,
    'extras' => $extras,
  ));
}
