<?php

/**
 * Implements hook_schema().
 */
function mapboxjs_schema() {

  // MapBox.js map preset table.
  $schema['mapboxjs_preset'] = array(
    'description' => 'MapBox.js map presets',
    'fields' => array(
      'mapboxjs_preset_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique Mapbox.js preset entity ID.',
      ),
      'name' => array(
        'description' => 'The machine-readable name of this mapboxjs_preset type.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this mapboxjs_preset type.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'settings' => array(
        'description' => 'MapBox JS map settings as a serialized array.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
       ),
      'created' => array(
        'description' => 'The Unix timestamp when the mapboxjs_preset was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the mapboxjs_preset was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      // following fields are for supporting exportable status.
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator may delete this preset.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('mapboxjs_preset_id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/*
 * Implements hook_install()
 */
function mapboxjs_install() {
  // Add a locked Link field to our MapBox.js custom entity bundle.
  // Provides storage for our base tileset(s).
  $base_tilesets_config = array(
    'translatable' => '0',
    'entity_types' => array(),
    'settings' => array(
      'attributes' => array(
        'target' => 'default',
        'class' => '',
        'rel' => '',
      ),
      'url' => 0,
      'title' => 'required',
      'title_value' => '',
      'title_maxlength' => 128,
      'enable_tokens' => 1,
      'display' => array(
        'url_cutoff' => 80,
      ),
    ),
    'foreign keys' => array(),
    'indexes' => array(),
    'field_name' => 'field_base_tilesets',
    'type' => 'link_field',
    'module' => 'link',
    'active' => '1',
    'locked' => '1',
    'cardinality' => '-1',
    'deleted' => '0',
  );
  $base_tilesets_instance = array(
    'label' => 'Base tileset(s)',
    'widget' => array(
      'weight' => '-1',
      'type' => 'link_field',
      'module' => 'link',
      'active' => 0,
      'settings' => array(),
    ),
    'settings' => array(
      'validate_url' => 1,
      'url' => 0,
      'title' => 'required',
      'title_value' => '',
      'title_maxlength' => '128',
      'enable_tokens' => 1,
      'display' => array(
        'url_cutoff' => '80',
      ),
      'attributes' => array(
        'target' => 'default',
        'rel' => '',
        'class' => '',
        'configurable_title' => 0,
        'title' => '',
      ),
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '0',
        'settings' => array(),
      ),
    ),
    'required' => 1,
    'description' => 'Please enter the full URL of a <a href="http://mapbox.com">MapBox</a> tileset to be added to this map as a base layer. This URL should be in the TileJSON file format, like http://a.tiles.mapbox.com/v3/tmcw.map-hehqnmda.jsonp. The "title" you enter for this URL will be used in the map\'s tile switcher.',
    'default_value' => NULL,
    'field_name' => 'field_base_tilesets',
    'entity_type' => 'mapboxjs_preset',
    'bundle' => 'mapboxjs_preset',
    'deleted' => '0',
  );
  field_create_field($base_tilesets_config);
  field_create_instance($base_tilesets_instance);
  // Add a locked Link field to our MapBox.js custom entity bundle.
  // Provides storage for optional tilesets place on top of base tileset(s).
  $optional_tilesets_config = array(
    'translatable' => '0',
    'entity_types' => array(),
    'settings' => array(
      'attributes' => array(
        'target' => 'default',
        'class' => '',
        'rel' => '',
      ),
      'url' => 0,
      'title' => 'required',
      'title_value' => '',
      'title_maxlength' => 128,
      'enable_tokens' => 1,
      'display' => array(
        'url_cutoff' => 80,
      ),
    ),
    'foreign keys' => array(),
    'indexes' => array(),
    'field_name' => 'field_optional_tilesets',
    'type' => 'link_field',
    'module' => 'link',
    'active' => '1',
    'locked' => '1',
    'cardinality' => '-1',
    'deleted' => '0',
  );
  $optional_tilesets_instance = array(
    'label' => 'Optional tileset(s)',
    'widget' => array(
      'weight' => '0',
      'type' => 'link_field',
      'module' => 'link',
      'active' => 0,
      'settings' => array(),
    ),
    'settings' => array(
      'validate_url' => 1,
      'url' => 0,
      'title' => 'required',
      'title_value' => '',
      'title_maxlength' => '128',
      'enable_tokens' => 1,
      'display' => array(
        'url_cutoff' => '80',
      ),
      'attributes' => array(
        'target' => 'default',
        'rel' => '',
        'class' => '',
        'configurable_title' => 0,
        'title' => '',
      ),
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '0',
        'settings' => array(),
      ),
    ),
    'required' => 0,
    'description' => 'Please enter the full URL of a <a href="http://mapbox.com">MapBox</a> tileset to be added to this map on top of the base tileset layers. This URL should be in the TileJSON file format, like http://a.tiles.mapbox.com/v3/tmcw.map-hehqnmda.jsonp. The "title" you enter for this URL will be used in the map\'s toggle controls for optional tileset layers, if the controls are enabled.',
    'default_value' => NULL,
    'field_name' => 'field_optional_tilesets',
    'entity_type' => 'mapboxjs_preset',
    'bundle' => 'mapboxjs_preset',
    'deleted' => '0',
  );
  field_create_field($optional_tilesets_config);
  field_create_instance($optional_tilesets_instance);
}

/**
 * Implements hook_field_schema().
 */
function mapboxjs_field_schema($field) {
  $columns = array(
    'value' => array(
      'type' => 'varchar',
      'length' => 128,
      'not null' => FALSE,
    ),
  );
  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_uninstall().
 */
function mapboxjs_uninstall() {
  // Delete locked fields when uninstalling module.
  field_delete_instance('field_base_tilesets', TRUE);
  field_delete_instance('field_optional_tilesets', TRUE);
}
